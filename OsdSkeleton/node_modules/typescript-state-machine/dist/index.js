"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log4javascript_1 = require("log4javascript");
var fsm;
(function (fsm) {
    var StateMachineImpl = /** @class */ (function () {
        function StateMachineImpl(states, validTransitions, initialState) {
            this.log = log4javascript_1.getLogger(this.constructor.name);
            this.states = states;
            this.validTransitions = validTransitions;
            this._state = initialState;
            this._transitionListeners = {};
        }
        Object.defineProperty(StateMachineImpl.prototype, "state", {
            get: function () {
                return this._state;
            },
            enumerable: true,
            configurable: true
        });
        StateMachineImpl.prototype.onEnterState = function (state, callBack) {
            return this.addTransitionListener(callBack, undefined, state);
        };
        StateMachineImpl.prototype.onLeaveState = function (state, callBack) {
            return this.addTransitionListener(callBack, state, undefined);
        };
        StateMachineImpl.prototype.onTransition = function (fromState, toState, callBack) {
            return this.addTransitionListener(callBack, fromState, toState);
        };
        StateMachineImpl.prototype.onAnyTransition = function (callBack) {
            return this.addTransitionListener(callBack, undefined, undefined);
        };
        StateMachineImpl.prototype.addTransitionListener = function (callBack, fromState, toState) {
            var transition = this.transitionLabel(fromState, toState);
            if (!this._transitionListeners[transition]) {
                this._transitionListeners[transition] = [];
            }
            var listenersForTransition = this._transitionListeners[transition];
            var transitionListener = new TransitionListener(callBack, fromState, toState);
            listenersForTransition.push(transitionListener);
            return {
                cancel: function () {
                    transitionListener.active = false;
                }
            };
        };
        StateMachineImpl.prototype.checkInState = function (state, message) {
            if (!this.inState(state)) {
                throw new Error(message || 'Expected to be in ' + state + ' but was in ' + this.state);
            }
        };
        StateMachineImpl.prototype.checkInOneOfStates = function (states, message) {
            if (!this.inOneOfStates(states)) {
                throw new Error(message || 'Expected to be in one of ' + states + ' but was in ' + this.state);
            }
        };
        StateMachineImpl.prototype.inOneOfStates = function (states) {
            return (states.indexOf(this._state) !== -1);
        };
        StateMachineImpl.prototype.inState = function (state) {
            return this._state === state;
        };
        StateMachineImpl.prototype.invokeAllTransitionListeners = function (fromState, toState) {
            var allLeaveTransitions = this.transitionLabel(fromState, undefined);
            this.invokeTransitionListeners(fromState, toState, this._transitionListeners[allLeaveTransitions]);
            var transition = this.transitionLabel(fromState, toState);
            this.invokeTransitionListeners(fromState, toState, this._transitionListeners[transition]);
            var allEnterTransitions = this.transitionLabel(undefined, toState);
            this.invokeTransitionListeners(fromState, toState, this._transitionListeners[allEnterTransitions]);
            var allTransitions = this.transitionLabel(undefined, undefined);
            this.invokeTransitionListeners(fromState, toState, this._transitionListeners[allTransitions]);
        };
        StateMachineImpl.prototype.invokeTransitionListeners = function (fromState, toState, listeners) {
            if (listeners) {
                for (var index = 0; index < listeners.length; index++) {
                    var listener = listeners[index];
                    if (listener.active) {
                        try {
                            listener.callBack(fromState, toState);
                        }
                        catch (e) {
                            this.log.warn('Uncaught error in listener :' + e);
                        }
                    }
                    else {
                        // Remove inactive listener
                        listeners.splice(index, 1);
                        index--;
                    }
                }
            }
        };
        StateMachineImpl.prototype.transitionLabel = function (fromState, toState) {
            return ((fromState && fromState.label) || '*') + ' --> ' + ((toState && toState.label) || '*');
        };
        StateMachineImpl.prototype.waitUntilLeft = function (state) {
            var _this = this;
            return new Promise(function (resolve) {
                if (_this._state !== state) {
                    resolve(_this._state);
                }
                else {
                    var registration_1 = _this.onLeaveState(state, function (from, to) {
                        registration_1.cancel();
                        resolve(to);
                    });
                }
            });
        };
        StateMachineImpl.prototype.waitUntilEntered = function (state) {
            return this.waitUntilEnteredOneOf([state]);
        };
        StateMachineImpl.prototype.waitUntilEnteredOneOf = function (states) {
            var _this = this;
            return new Promise(function (resolve) {
                if (states.indexOf(_this._state) !== -1) {
                    resolve(_this._state);
                }
                else {
                    var registrations_1 = [];
                    var finished_1 = false;
                    var _loop_1 = function (state) {
                        var registration = _this.onEnterState(state, function (from, to) {
                            registration.cancel();
                            registrations_1.forEach(function (reg) {
                                if (registration !== reg) {
                                    reg.cancel();
                                }
                            });
                            finished_1 = true;
                            resolve(to);
                        });
                        if (finished_1) {
                            return "break";
                        }
                        registrations_1.push(registration);
                    };
                    for (var _i = 0, states_1 = states; _i < states_1.length; _i++) {
                        var state = states_1[_i];
                        var state_1 = _loop_1(state);
                        if (state_1 === "break")
                            break;
                    }
                }
            });
        };
        StateMachineImpl.prototype.setState = function (newState) {
            this.checkTransition(newState);
            this.log.debug("State : " + this._state + " --> " + newState);
            var oldState = this._state;
            this._state = newState;
            this.invokeAllTransitionListeners(oldState, newState);
        };
        StateMachineImpl.prototype.checkTransition = function (newState) {
            if (!this.canGoToState(newState)) {
                throw new Error('Invalid transition from ' + this._state + ' to ' + newState);
            }
        };
        StateMachineImpl.prototype.canGoToState = function (newState) {
            return this.validTransitions[this._state.label].indexOf(newState) !== -1;
        };
        return StateMachineImpl;
    }());
    fsm.StateMachineImpl = StateMachineImpl;
    var State = /** @class */ (function () {
        function State(label, parent) {
            var _this = this;
            this.label = label;
            this.parent = parent;
            this.toString = function () {
                if (_this.parent) {
                    return _this.parent.toString() + '/' + _this.label;
                }
                else {
                    return _this.label;
                }
            };
        }
        // noinspection JSUnusedGlobalSymbols
        State.prototype.userFriendlyDescription = function () {
            return this.label;
        };
        return State;
    }());
    fsm.State = State;
    var TransitionListener = /** @class */ (function () {
        function TransitionListener(callBack, fromState, toState) {
            this.callBack = callBack;
            this.fromState = fromState;
            this.toState = toState;
            this.active = true;
        }
        return TransitionListener;
    }());
    // Decorators
    var log = log4javascript_1.getLogger('fsm.decorators');
    /*
            Method annotator. Throw an error if the state when the method is called
            is different from the given state
        */
    function CheckStateIs(state, message) {
        return function (target, propertyKey, descriptor) {
            var originalMethod = descriptor.value;
            descriptor.value = function () {
                var context = this;
                if (context.state === state) {
                    originalMethod.apply(context, arguments);
                }
                else {
                    throw new Error(message || 'Illegal execution of ' + propertyKey + ' : State should be ' + state + ' but state = ' + context.state);
                }
            };
            return descriptor;
        };
    }
    fsm.CheckStateIs = CheckStateIs;
    /*
            Method annotator. Throw an error if the state when the method is called
            is not one of the given states
        */
    function CheckStateIn(states, message) {
        return function (target, propertyKey, descriptor) {
            var originalMethod;
            if (descriptor.value) {
                originalMethod = descriptor.value;
                descriptor.value = function () {
                    var context = this;
                    if (states.indexOf(context.state) !== -1) {
                        return originalMethod.apply(context, arguments);
                    }
                    else {
                        throw new Error(message || 'Illegal execution of ' + propertyKey + ' : State should be one of  ' + states + ' but state = ' + context.state);
                    }
                };
            }
            else if (descriptor.get) {
                var originalGetter_1 = descriptor.get;
                descriptor.get = function () {
                    var context = this;
                    if (states.indexOf(context.state) !== -1) {
                        return originalGetter_1.apply(context, arguments);
                    }
                    else {
                        throw new Error(message || 'Illegal execution of ' + propertyKey + ' : State should be one of  ' + states + ' but state = ' + context.state);
                    }
                };
            }
            return descriptor;
        };
    }
    fsm.CheckStateIn = CheckStateIn;
    /*
            Method annotator. Skip the method execution if the state when the method is called
            is different from the given state
        */
    function AssumeStateIs(state) {
        return function (target, propertyKey, descriptor) {
            var originalMethod = descriptor.value;
            descriptor.value = function () {
                var context = this;
                if (context.state === state) {
                    originalMethod.apply(context, arguments);
                }
                else {
                    log.warn('Skipping execution of ' + propertyKey + ' : State should be ' + state + ' but state = ' + context.state);
                }
            };
            return descriptor;
        };
    }
    fsm.AssumeStateIs = AssumeStateIs;
    /*
            Method annotator. Skip the method execution if the state when the method is called
            is the same as the given state
        */
    function AssumeStateIsNot(state) {
        return function (target, propertyKey, descriptor) {
            var originalMethod = descriptor.value;
            descriptor.value = function () {
                var context = this;
                if (context.state !== state) {
                    originalMethod.apply(context, arguments);
                }
                else {
                    log.warn('Skipping execution of ' + propertyKey + ' : State should be different from ' + state);
                }
            };
            return descriptor;
        };
    }
    fsm.AssumeStateIsNot = AssumeStateIsNot;
})(fsm = exports.fsm || (exports.fsm = {}));
//# sourceMappingURL=index.js.map